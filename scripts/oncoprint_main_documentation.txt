#===============================================================================
#
#         FILE: home/proj/MDW_genomics/steepale/oncoprint/scripts/oncoprint_main_documentation.txt
#
#        USAGE: for documentation purposes, scripts inside
#
#  DESCRIPTION:  This script serves as a step by step documentation script and development script for performing oncoprint array preparations for GenVisR in R
#                
# REQUIREMENTS:  ---
#        NOTES:  ---
#       AUTHOR:  Alec Steep, steepale@msu.edu
#  AFFILIATION:  Michigan State University (MSU), East Lansing, MI, United States
#				         USDA ARS Avian Disease and Oncology Lab (ADOL), East Lansing, MI, United States
#				         Technical University of Munich (TUM), Weihenstephan, Germany
#      VERSION:  1.0
#      CREATED:  2017.02.17
#     REVISION:  
#===============================================================================

# Permanent PROJECT DIRECTORY (TUM Cluster)
cd /home/proj/MDW_genomics/steepale/oncoprint

## Files with annotated variants
#./data/somatic_snvs_final.txt
#./data/somatic_indels_final.txt
## Annotated CNVs and LOH
#./data/scnas_annotation.bed
## Chicken-human orthologs from ensembl
#/home/proj/MDW_genomics/steepale/oncoprint/data/biomart_chicken-human_orthologs_2017_01_04.txt
## Annotated somatic gene fusions
#/home/proj/MDW_genomics/steepale/gene_fusions/data/chimeric_junctions_filtered_annotated.txt

# Create an array in python
python ./scripts/create_oncoprint_somatic_snv_array.py \
/home/proj/MDW_genomics/steepale/illumina_validation/data/somatic_snvs_and_indels_final_priority.txt \
./data/oncoprint_somatic_snv_array_geneid-x_tumors-y.txt \
./data/oncoprint_somatic_indel_array_geneid-x_tumors-y.txt

# ./scripts/create_oncoprint_somatic_snv_array.py
###################################
import sys
import os
import numpy

# Infile
snv_indel_file = sys.argv[1]

# Reference files
tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_dnaseq_list_NNN-N_SN.txt"

# Outfiles
mut_genes_rename_file = open("./data/somatic_nonsyn_snv_indel_mutated_genes_renamed.txt", 'w')
snv_array_file = sys.argv[2]
indel_array_file = sys.argv[3]
genes_of_interest_file = open("./data/genes_of_interest_somatic_snvs_and_indels_final.int", 'w')

# Create a unique list of all tumor samples
tumors = set()
for tumor_bird in open(tumor_birds_file):
	tumor_bird = tumor_bird.rstrip()
	tumors.add(tumor_bird)
tumors = list(tumors)
tumors.sort()

# Create and fill null dictionary for gene_id to gene_symbol relationship
gene_id2gene_symbol = {}
# Create and fill null dictionary to say if gene in sample is mutated via SNV
snv_status = {}
# Create and fill null dictionary to say if gene in sample is mutated via INDEL
indel_status = {}

# Write a header for the genes of interest file
genes_of_interest_file.write('##GENE:' + '\t' + 'Either chicken ensembl gene name, chicken ensembl gene id, or high confidence human orthologue gene name(s)')
genes_of_interest_file.write('##TSN_GENE:'+' '+'Number of tumors with mutations in gene' + '\n')
genes_of_interest_file.write('##CGC_STATUS:'+' '+'Whether the mutated gene is in COSMICs Cancer Gene Consensus' + '\n')
genes_of_interest_file.write('#GENE'+'\t'+'TSN_GENE'+'\t'+'CGC_STATUS'+'\n')

# Create a unique list of all gene_ids
gene_ids = set()
for line in open(snv_indel_file):
	line = line.rstrip()
	if line[0] != '#':
		col = line.split('\t')
		ref = col[3]
		alt = col[4]
		tsn = int(col[12])
		tsn_var = int(col[11])
		gene_id = col[9]
		gene_symbol = col[8]
		samples = col[13]
		ortholog = col[10]
		cgc = col[17]
		gene_ids.add(gene_id)
		# Add to the dictionary of gene_id2gene_symbol
		if gene_symbol != 'NA':
			gene_id2gene_symbol[gene_id] = gene_symbol
		elif gene_symbol == 'NA':
			if ortholog != 'NA':
				gene_id2gene_symbol[gene_id] = ortholog
			else:
				gene_id2gene_symbol[gene_id] = gene_id
		# Write to genes of interest file
		genes_of_interest_file.write(gene_id2gene_symbol[gene_id]+'\t'+str(tsn)+'\t'+cgc+'\n')
		# Fill in dictionaries to say if gene in sample is mutated via SNV or INDEL
		if tsn_var == 1:
			# For SNVs
			if len(ref) == len(alt):
				if gene_id in snv_status.keys():
					snv_status[gene_id].append(samples)
				elif gene_id not in snv_status.keys():
					snv_status[gene_id] = [samples]
			# For INDELs
			elif len(ref) != len(alt):
				if gene_id in indel_status.keys():
					indel_status[gene_id].append(samples)
				elif gene_id not in indel_status.keys():
					indel_status[gene_id] = [samples]
		elif tsn_var > 1:
			for n in range(tsn_var):
				# For SNVs
				if len(ref) == len(alt):
					if gene_id in snv_status.keys():
						snv_status[gene_id].append(samples.split(';')[n])
					elif gene_id not in snv_status.keys():
						snv_status[gene_id] = [samples.split(';')[n]]
				# For INDELs
				elif len(ref) != len(alt):
					if gene_id in indel_status.keys():
						indel_status[gene_id].append(samples.split(';')[n])
					elif gene_id not in indel_status.keys():
						indel_status[gene_id] = [samples.split(';')[n]]
gene_ids = list(gene_ids)
gene_ids.sort()

# Close genes of interest file
genes_of_interest_file.close()

# Test if dictionary is accurate
#for gene_id, tumors in indel_status.items():
#	print('gene_id: ' + gene_id + '\t' + 'tumors: ' + str(tumors))

# Create a new file with gene symbols
for gene_id in gene_ids:
	mut_genes_rename_file.write(gene_id2gene_symbol[gene_id] + '\n')
# Close file
mut_genes_rename_file.close()

# Create and fill SNV mutation array
onco_snvs = numpy.zeros((len(gene_ids), len(tumors)))
for (gene_id_mp, gene_id) in enumerate(gene_ids):
	for (tumor_mp, tumor) in enumerate(tumors):
		for mut_gene_id, mut_tumors_list in snv_status.items():
			for mut_tumor in mut_tumors_list:
				if mut_gene_id == gene_id and mut_tumor == tumor:
					onco_snvs[gene_id_mp, tumor_mp] = 1

array_header = "738-1_S1"+'\t'+"741-1_S2"+'\t'+"756-3_S3"+'\t'+"766-1_S4"+'\t'+"777-3_S14"+'\t'+"787-2_S15"+'\t'+"788-1_S16"+'\t'+"794-1_S17"+'\t'+"798-1_S5"+'\t'+"833-1_S6"+'\t'+"834-2_2_S12"+'\t'+"834-2_S7"+'\t'+"835-1_S18"+'\t'+"841-3_S19"+'\t'+"842-2_2_S25"+'\t'+"842-2_S20"+'\t'+"855-1_S8"+'\t'+"863-1_S9"+'\t'+"884-2_S21"+'\t'+"901-2_2_S26"+'\t'+"901-2_S22"+'\t'+"906-1_S23"+'\t'+"911-1_2_S13"+'\t'+"911-1_S24"+'\t'+"918-3_S10"+'\t'+"927-2_S11"

numpy.savetxt(snv_array_file, onco_snvs, fmt='%i', delimiter='\t', newline='\n', header=array_header)

os.system('sed -i "s/^# //" ./data/oncoprint_somatic_snv_array_geneid-x_tumors-y.txt')

# Create and fill indel mutation array
onco_indels = numpy.zeros((len(gene_ids), len(tumors)))
for (gene_id_mp, gene_id) in enumerate(gene_ids):
	for (tumor_mp, tumor) in enumerate(tumors):
		for mut_gene_id, mut_tumors_list in indel_status.items():
			for mut_tumor in mut_tumors_list:
				if mut_gene_id == gene_id and mut_tumor == tumor:
					onco_indels[gene_id_mp, tumor_mp] = 1

array_header = "738-1_S1"+'\t'+"741-1_S2"+'\t'+"756-3_S3"+'\t'+"766-1_S4"+'\t'+"777-3_S14"+'\t'+"787-2_S15"+'\t'+"788-1_S16"+'\t'+"794-1_S17"+'\t'+"798-1_S5"+'\t'+"833-1_S6"+'\t'+"834-2_2_S12"+'\t'+"834-2_S7"+'\t'+"835-1_S18"+'\t'+"841-3_S19"+'\t'+"842-2_2_S25"+'\t'+"842-2_S20"+'\t'+"855-1_S8"+'\t'+"863-1_S9"+'\t'+"884-2_S21"+'\t'+"901-2_2_S26"+'\t'+"901-2_S22"+'\t'+"906-1_S23"+'\t'+"911-1_2_S13"+'\t'+"911-1_S24"+'\t'+"918-3_S10"+'\t'+"927-2_S11"

numpy.savetxt(indel_array_file, onco_indels, fmt='%i', delimiter='\t', newline='\n', header=array_header)

os.system('sed -i "s/^# //" ./data/oncoprint_somatic_indel_array_geneid-x_tumors-y.txt')

# Test for IKZF1
#for (gene_id_mp, gene_id) in enumerate(gene_ids):
	#for (tumor_mp, tumor) in enumerate(tumors):
		#if gene_id == 'ENSGALG00000013086':
			#print(onco_snvs[gene_id_mp, ])
			#print(onco_indels[gene_id_mp, ])

###################################

# Sort the genes-of-interest file and determine a threshold for which genes are interesting
(grep "^#" ./data/genes_of_interest_somatic_snvs_and_indels_final.int; \
grep -v "^#" ./data/genes_of_interest_somatic_snvs_and_indels_final.int | \
sort | uniq | sort -k2,2nr) | grep -v -e "^ENSGALG" -e ";" > \
./data/genes_of_interest_somatic_snvs_and_indels_final.txt

# Create the mut_genes_name file
#grep -v "^#" ./data/genes_of_interest_somatic_snvs_and_indels_final.txt | \
#cut -f1 > ./data/somatic_nonsyn_snv_indel_mutated_genes_renamed.txt

# Send the files to macbook pro for oncoprint generation in R Studio
# From (/Users/Alec/Documents/Bioinformatics/MDV_Project/oncoprint)
# Transfer the SNV mutation status array
rsync -avp \
a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/oncoprint/data/oncoprint_somatic_snv_array_geneid-x_tumors-y.txt \
./data/
# Transfer the INDEL mutation status array
rsync -avp \
a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/oncoprint/data/oncoprint_somatic_indel_array_geneid-x_tumors-y.txt \
./data/
# Transfer mutated gene labels (x-axis for R matrices)
rsync -avp \
a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/oncoprint/data/somatic_nonsyn_snv_indel_mutated_genes_renamed.txt \
./data/
# Transfer the genes of interest file
rsync -avp \
a.steep@barcelona.binfo.wzw.tum.de:/home/proj/MDW_genomics/steepale/oncoprint/data/genes_of_interest_somatic_snvs_and_indels_final.txt \
./data/


# ./scripts/oncoprint_mutation_landscape_figure.R
#########################################
# Script based on: http://bioconductor.org/packages/devel/bioc/vignettes/ComplexHeatmap/inst/doc/s8.oncoprint.html

setwd("/Users/Alec/Documents/Bioinformatics/MDV_Project/oncoprint")
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)

# Load the numpy generated SNV mutation array via a tab seperate file (contains header) into R
mat_snvs = read.table("./data/oncoprint_somatic_snv_array_geneid-x_tumors-y.txt", header = TRUE, stringsAsFactors=FALSE, sep = "\t")
somatic_mut_gene_labels = read.table("./data/somatic_nonsyn_snv_indel_mutated_genes_renamed.txt")
rownames(mat_snvs) = somatic_mut_gene_labels$V1
mat_snvs = as.matrix(mat_snvs)
mat_snvs[mat_snvs=="1"]<-"SNV"
mat_snvs[mat_snvs=="0"]<-""

# Load the numpy generated INDEL mutation array via a tab seperate file (contains header) into R
mat_indels = read.table("./data/oncoprint_somatic_indel_array_geneid-x_tumors-y.txt", header = TRUE, stringsAsFactors=FALSE, sep = "\t")
somatic_mut_gene_labels = read.table("./data/somatic_nonsyn_snv_indel_mutated_genes_renamed.txt")
rownames(mat_indels) = somatic_mut_gene_labels$V1
mat_indels = as.matrix(mat_indels)
mat_indels[mat_indels=="1"]<-"INDEL"
mat_indels[mat_indels=="0"]<-""

# Combine the SNV and INDEL Matrices
mat_final = matrix(paste(mat_snvs,mat_indels,sep=";"),nrow=nrow(mat_snvs),ncol=ncol(mat_snvs))
dimnames(mat_final) <- list(rownames(mat_indels), colnames(mat_indels))
mat_final <- replace(mat_final, mat_final == ";", "")
mat_final <- replace(mat_final, mat_final == "SNV;", "SNV")
mat_final <- replace(mat_final, mat_final == ";INDEL", "INDEL")

# Load the genes of interest file for all genes
#genes_interest_counts = read.table("./data/genes_of_interest_somatic_snvs_and_indels_final.txt", header = FALSE, stringsAsFactors=FALSE, sep = "\t")

# Load gene of interest for specific pathways
# Calcium regulation pathway
#genes_interest_counts = read.table("./data/ca_regulation_somatic_snvs_indels.txt", header = FALSE, stringsAsFactors=FALSE, sep = "\t")
# Fanconi Anemia pathway
genes_interest_counts = read.table("./data/fanconi_anemia_somatic_snvs_indels.txt", header = FALSE, stringsAsFactors=FALSE, sep = "\t")


colnames(genes_interest_counts) = c("GENE", "TOTAL_COHORT_MUTS")
# Genes with at least one mutation
genes_of_interest_int = genes_interest_counts[genes_interest_counts$TOTAL_COHORT_MUTS > 0, ]
# Alter the genes of interest length
#genes_of_interest = genes_of_interest[1:50]
# OR Selecti genes with gene name annotation
#genes_of_interest_int = genes_interest_counts[!grepl("ENSGALG", genes_interest_counts$GENE), ]
genes_of_interest = genes_of_interest_int[1:4, 'GENE']

# Final Matrix
mat_oncoprint = mat_final[genes_of_interest, ]

# Set the parameters for contructing the oncoprint figure
alter_fun = list(background = function(x, y, w, h, v) 
{grid.rect(x, y, w-unit(0.5, "mm"), h-unit(0.5, "mm"), 
           gp = gpar(fill = "#CCCCCC", col = NA))}, 
SNV = function(x, y, w, h) 
{grid.rect(x, y, w*0.33, h*1.00, 
           gp = gpar(fill = "blue", col = NA))},
INDEL = function(x, y, w, h) 
{grid.rect(x, y, w*0.66, h*0.90, 
           gp = gpar(fill = "#008000", col = NA))})
#AMP = function(x, y, w, h) {
#        grid.rect(x, y, w-unit(0.5, "mm"), h*0.50, gp = gpar(fill = "orange", col = NA))},
#DEL = function(x, y, w, h) {
#        grid.rect(x, y, w-unit(0.5, "mm"), h*0.50, gp = gpar(fill = "red", col = NA))})

col = c("SNV" = "blue", "INDEL" = "#008000")

ht = oncoPrint(mat_oncoprint,
               get_type = function(x) strsplit(x, ";")[[1]],
               alter_fun = alter_fun, 
               col = col,
               show_pct = TRUE,
               pct_gp = gpar(fontsize = 6),
               show_column_names = TRUE,
               row_names_gp = gpar(fontsize = 6),
               column_names_gp = gpar(fontsize = 10),
               remove_empty_columns = FALSE,
               axis_gp = gpar(fontsize = 8),
               column_title = "Candidate Driver Gene Mutation Profiles Across MD Lymphomas",
               column_title_gp = gpar(fontsize = 18),
               heatmap_legend_param = list(title = "Alternations", at = c("SNV", "INDEL"), 
                                           labels = c("Non-Synonymous SNV", "Non-Synonymous INDEL"), 
                                           nrow = 1, title_position = "leftcenter"))

# Save the oncoprint for top 30 mutated genes
#pdf("./figures/oncoprint_nonsyn_somatic_snvs_indels.pdf")
#plot <- draw(ht, heatmap_legend_side = "bottom")     
#dev.off()

# Save the oncoprint for Ca regulation
#pdf("./figures/ca_regulation_somatic_snvs_indels.pdf")
#plot <- draw(ht, heatmap_legend_side = "bottom")     
#dev.off()

# Save the oncoprint for Fanconi Anemia
pdf("./figures/fanconi_anemia_somatic_snvs_indels.pdf")
plot <- draw(ht, heatmap_legend_side = "bottom")     
dev.off()

#########################################















# Create a reference file of the sample titles for gene fusions
grep -v "^#" /home/proj/MDW_genomics/steepale/gene_fusions/data/chimeric_junctions_filtered_annotated.txt | cut -f5 | sort | uniq | sed "s/;/\n/g" | sort | uniq >/home/users/a.steep/databases/samples/tumor_sample_rnaseq_list_gene_fusions_017NNN-N_redundent_1s.txt

# Create an array in python
python ./scripts/create_oncoprint_somatic_gene_fusion_array.py

# ./scripts/create_oncoprint_somatic_gene_fusion_array.py
###################################
import sys
import os
import numpy

# Reference files
tumor_birds_file = "/home/users/a.steep/databases/samples/tumor_sample_rnaseq_list_gene_fusions_017NNN-N_redundent_1s.txt"
#snv_file = open("/home/proj/MDW_genomics/steepale/pathway_analysis/results/somatic_snvs_final.txt")
#indel_file = open("/home/proj/MDW_genomics/steepale/pathway_analysis/results/somatic_indels_final.txt")
fusion_file = open("/home/proj/MDW_genomics/steepale/gene_fusions/data/chimeric_junctions_filtered_annotated.txt")
#snv_genes_file = open("/home/users/a.steep/databases/samples/somatic_nonsyn_snv_mutated_genes.txt")
#indel_genes_file = open("/home/users/a.steep/databases/samples/somatic_nonsyn_indel_mutated_genes.txt")
fusion_genes_file = open("/home/users/a.steep/databases/samples/somatic_gene_fusion_genes_ensembl_gene_name.txt")
#snv_array_file = "./data/oncoprint_somatic_snv_array_geneid-x_tumors-y.txt"
#indel_array_file = "./data/oncoprint_somatic_indel_array_geneid-x_tumors-y.txt"
fusion_array_file = "./data/oncoprint_somatic_gene_fusions_array_geneid-x_tumors-y.txt"

# Create a unique list of all tumor samples
tumors = set()
for tumor_bird in open(tumor_birds_file):
	tumor_bird = tumor_bird.rstrip()
	tumors.add(tumor_bird)
tumors = list(tumors)
tumors.sort()
#print(tumors)

# Create and fill null dictionary to say if gene in sample is mutated via gene fusion
# &
# Create a unique list of all fusion gene names
fusion_status = {}
fusion_genes = set()
for fusion_gene in fusion_genes_file:
	fusion_gene = fusion_gene.rstrip()
	fusion_genes.add(fusion_gene)
	fusion_status[fusion_gene] = []
fusion_genes = list(fusion_genes)
fusion_genes.sort()
#print(len(fusion_genes))

# Fill in dictionary to say if gene in sample is mutated via fusion
for fusion_line in fusion_file:
	fusion_line = fusion_line.rstrip()
	if fusion_line[0] != '#':
		fusion_col = fusion_line.split('\t')
		fusion_gene_nameA = fusion_col[1]
		fusion_gene_nameB = fusion_col[2]
		fusion_tsn = int(fusion_col[3])
		fusion_sample = fusion_col[4]
		# Add mutated samples to the dictionary of fusion mutated genes
		if fusion_tsn == 1:
			fusion_status[fusion_gene_nameA].append(fusion_sample)
			fusion_status[fusion_gene_nameB].append(fusion_sample)
		elif fusion_tsn > 1:
			sample = []
			for n in range(fusion_tsn):
				sample.append(n)
				sample[n] = fusion_sample.split(';')[n]
				fusion_status[fusion_gene_nameA].append(sample[n])
				fusion_status[fusion_gene_nameB].append(sample[n])

# Test if dictionary is accurate
#for gene, tumors in fusion_status.items():
#	print('gene: ' + gene + '\t' + 'tumors: ' + str(tumors))

# Create and fill fusion mutation array
onco_fusions = numpy.zeros((len(fusion_genes), len(tumors)))
for (gene_name_mp, gene_name) in enumerate(fusion_genes):
	for (tumor_mp, tumor) in enumerate(tumors):
		for mut_gene_name, mut_tumors_list in fusion_status.items():
			for mut_tumor in mut_tumors_list:
				if str(mut_gene_name) == str(gene_name) and str(mut_tumor) == str(tumor):
					onco_fusions[gene_name_mp, tumor_mp] = 1

array_header = "738-1_S"+'\t'+"741-1_S"+'\t'+"766-1_S"+'\t'+"777-3_S"+"794-1_S"+'\t'+"798-1_S"+'\t'+"798-1_2_S"+'\t'+"833-1_S"+'\t'+"835-1_S"+'\t'+"841-3_S"+'\t'+"842-2_1_S"+'\t'+"842-2_S"+'\t'+"855-1_S"+'\t'+"863-1_S"+'\t'+"884-2_S"+'\t'+"901-2_2_S"+'\t'+"906-1_S"+'\t'+"911-1_S"+'\t'+"911-1_2_S"+'\t'+"918-3_S"+'\t'+"927-2_S"

numpy.savetxt(fusion_array_file, onco_fusions, fmt='%i', delimiter='\t', newline='\n', header=array_header)

os.system('sed -i "s/^# //" ./data/oncoprint_somatic_gene_fusions_array_geneid-x_tumors-y.txt')

# Test for IKZF1
for (gene_id_mp, gene_id) in enumerate(fusion_genes):
	for (tumor_mp, tumor) in enumerate(tumors):
		if gene_id == 'TSG101':
			print(onco_fusions[gene_id_mp, ])


###################################











